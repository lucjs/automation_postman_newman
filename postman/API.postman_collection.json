{
	"info": {
		"_postman_id": "47cb8f0a-0bc5-4a69-af56-220ec40ef420",
		"name": "API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Comments",
			"item": [
				{
					"name": "Comments - Get All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Should status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should status code is not 500\", function () {\r",
									"    pm.response.to.not.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Should response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Should response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Should response have correct properties\", function () {\r",
									"    var jsonData = pm.response.json();    \r",
									"    pm.expect(jsonData[0]).to.have.property('postId');\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0]).to.have.property('name');\r",
									"    pm.expect(jsonData[0]).to.have.property('email');\r",
									"    pm.expect(jsonData[0]).to.have.property('body');   \r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROTOCOLO}}://{{URL}}/comments",
							"protocol": "{{PROTOCOLO}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comments - Get Duplicate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Should status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should status code is not 500\", function () {\r",
									"    pm.response.to.not.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Should response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Should response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Should ignore duplicate query parameters\", function () {  \r",
									"    pm.expect(pm.response.json()).to.eql([]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROTOCOLO}}://{{URL}}/comments?q=foo&q=bar",
							"protocol": "{{PROTOCOLO}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "q",
									"value": "foo"
								},
								{
									"key": "q",
									"value": "bar"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Comments - Get Boolean False",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"let email = \"Eliseo@gardner.biz\"\r",
									"\r",
									"pm.test(\"Should status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should status code is not 500\", function () {\r",
									"    pm.response.to.not.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Should response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Should response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Should response have correct properties\", function () {\r",
									"    var jsonData = pm.response.json();    \r",
									"    pm.expect(jsonData[0]).to.have.property('postId');\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0]).to.have.property('name');\r",
									"    pm.expect(jsonData[0]).to.have.property('email');\r",
									"    pm.expect(jsonData[0]).to.have.property('body');    \r",
									"});\r",
									"\r",
									"pm.test(\"Should support filtering by boolean value false\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].email).to.eql(email);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROTOCOLO}}://{{URL}}/comments?published=false",
							"protocol": "{{PROTOCOLO}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "published",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Comments - Get Multiple Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Should status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should status code is not 500\", function () {\r",
									"    pm.response.to.not.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Should response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Should response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Should response have correct properties\", function () {\r",
									"    var jsonData = pm.response.json();    \r",
									"    pm.expect(jsonData[0]).to.have.property('postId');\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0]).to.have.property('name');\r",
									"    pm.expect(jsonData[0]).to.have.property('email');\r",
									"    pm.expect(jsonData[0]).to.have.property('body');    \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROTOCOLO}}://{{URL}}/comments?id=1&id=2",
							"protocol": "{{PROTOCOLO}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								},
								{
									"key": "id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Photos",
			"item": [
				{
					"name": "Photos - Get All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Should status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should status code is not 500\", function () {\r",
									"    pm.response.to.not.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Should response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Should response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Should response have correct properties\", function () {\r",
									"    var jsonData = pm.response.json();    \r",
									"    pm.expect(jsonData[0]).to.have.property('albumId');\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0]).to.have.property('title');\r",
									"    pm.expect(jsonData[0]).to.have.property('url');\r",
									"    pm.expect(jsonData[0]).to.have.property('thumbnailUrl');    \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PROTOCOLO}}://{{URL}}/photos",
							"protocol": "{{PROTOCOLO}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"photos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Photos - Save Photo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let title = \"testTitle\"\r",
									"let url = \"https://via.placeholder.com/test1\"\r",
									"\r",
									"pm.test(\"Should status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Should status code is not 500\", function () {\r",
									"    pm.response.to.not.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Should response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Should response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Should response have correct properties\", function () {\r",
									"    var jsonData = pm.response.json();    \r",
									"    pm.expect(jsonData).to.have.property('albumId');\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('title');\r",
									"    pm.expect(jsonData).to.have.property('url');\r",
									"    pm.expect(jsonData).to.have.property('thumbnailUrl');    \r",
									"});\r",
									"\r",
									"pm.test(\"Should test post data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.title).to.eql(title);\r",
									"    pm.expect(jsonData.url).to.eql(url);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n        \"albumId\": 1000,\r\n        \"id\": 1100,\r\n        \"title\": \"testTitle\",\r\n        \"url\": \"https://via.placeholder.com/test1\",\r\n        \"thumbnailUrl\": \"https://via.placeholder.com/150/test1\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PROTOCOLO}}://{{URL}}/photos",
							"protocol": "{{PROTOCOLO}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"photos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Photos - Get Status 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Should status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Should status code is not 200\", function () {\r",
									"    pm.response.to.not.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROTOCOLO}}://{{URL}}/photos/50000",
							"protocol": "{{PROTOCOLO}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"photos",
								"50000"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Posts",
			"item": [
				{
					"name": "Posts - Get All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"let title = 'qui est esse'\r",
									"\r",
									"pm.test(\"Should status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should status code is not 500\", function () {\r",
									"    pm.response.to.not.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Should response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Should response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Should response have correct properties\", function () {\r",
									"    var jsonData = pm.response.json();    \r",
									"    pm.expect(jsonData[0]).to.have.property('userId');\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0]).to.have.property('title'); \r",
									"    pm.expect(jsonData[0]).to.have.property('body');    \r",
									"});\r",
									"\r",
									"pm.test(`Should post name is \"${title}\"`, function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1].title).to.eql(title);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{PROTOCOLO}}://{{URL}}/posts",
							"protocol": "{{PROTOCOLO}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Posts - Get Null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Should status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should status code is not 500\", function () {\r",
									"    pm.response.to.not.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Should response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Should response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Should not fail with null value\", function () {  \r",
									"    pm.expect(pm.response.json()).to.eql([]);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROTOCOLO}}://{{URL}}/posts?body=tomates",
							"protocol": "{{PROTOCOLO}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"posts"
							],
							"query": [
								{
									"key": "body",
									"value": "tomates"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Posts- Get Order Desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Should status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should status code is not 500\", function () {\r",
									"    pm.response.to.not.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Should response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Should response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Should response have correct properties\", function () {\r",
									"    var jsonData = pm.response.json();    \r",
									"    pm.expect(jsonData[0]).to.have.property('userId');\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0]).to.have.property('title'); \r",
									"    pm.expect(jsonData[0]).to.have.property('body');    \r",
									"});\r",
									"\r",
									"pm.test(\"Should matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"at nam consequatur ea labore ea harum\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROTOCOLO}}://{{URL}}/posts?_sort=id&_order=DESC",
							"protocol": "{{PROTOCOLO}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"posts"
							],
							"query": [
								{
									"key": "_sort",
									"value": "id"
								},
								{
									"key": "_order",
									"value": "DESC"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Users - Get All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Should status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should status code is not 500\", function () {\r",
									"    pm.response.to.not.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Should response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Should response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Should response have correct properties\", function () {\r",
									"    var jsonData = pm.response.json();    \r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0]).to.have.property('name');\r",
									"    pm.expect(jsonData[0]).to.have.property('username');\r",
									"    pm.expect(jsonData[0]).to.have.property('email');\r",
									"    pm.expect(jsonData[0].address.street).to.be.an('string');\r",
									"    pm.expect(jsonData[0].company.name).to.be.an('string'); \r",
									"\r",
									"    pm.environment.set(\"id\", jsonData[1].id);   \r",
									"    pm.environment.set(\"name\", jsonData[3].name);  \r",
									"    pm.environment.set(\"phone\", jsonData[4].phone); \r",
									"    \r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROTOCOLO}}://{{URL}}/users",
							"protocol": "{{PROTOCOLO}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users - Get Phone Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should status code is not 500\", function () {\r",
									"    pm.response.to.not.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Should response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Should response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Should response have correct properties\", function () {\r",
									"    var jsonData = pm.response.json();    \r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0]).to.have.property('name');\r",
									"    pm.expect(jsonData[0]).to.have.property('username');\r",
									"    pm.expect(jsonData[0]).to.have.property('email');\r",
									"    pm.expect(jsonData[0].address.street).to.be.an('string');\r",
									"    pm.expect(jsonData[0].company.name).to.be.an('string');    \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROTOCOLO}}://{{URL}}/users?tel={{phone}}",
							"protocol": "{{PROTOCOLO}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "tel",
									"value": "{{phone}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Users - Save User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let name = 'test1'\r",
									"let email = 'test1@april.biz'\r",
									"\r",
									"pm.test(\"Should status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Should status code is not 500\", function () {\r",
									"    pm.response.to.not.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Should response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Should response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Should response have correct properties\", function () {\r",
									"    var jsonData = pm.response.json();    \r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData).to.have.property('username');\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData.address.street).to.be.an('string');\r",
									"    pm.expect(jsonData.company.name).to.be.an('string');    \r",
									"});\r",
									"\r",
									"pm.test(\"Should test post data is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(name);\r",
									"    pm.expect(jsonData.email).to.eql(email); \r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 11,\r\n        \"name\": \"test1\",\r\n        \"username\": \"test1\",\r\n        \"email\": \"test1@april.biz\",\r\n        \"address\": {\r\n            \"street\": \"test1\",\r\n            \"suite\": \"test1\",\r\n            \"city\": \"test1\",\r\n            \"zipcode\": \"92998-3874\",\r\n            \"geo\": {\r\n                \"lat\": \"-37.3159\",\r\n                \"lng\": \"81.1496\"\r\n            }\r\n        },\r\n        \"phone\": \"1-770-736-8031 x56442\",\r\n        \"website\": \"hildegard.org\",\r\n        \"company\": {\r\n            \"name\": \"Romaguera-Crona\",\r\n            \"catchPhrase\": \"Multi-layered client-server neural-net\",\r\n            \"bs\": \"harness real-time e-markets\"\r\n        }\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PROTOCOLO}}://{{URL}}/users",
							"protocol": "{{PROTOCOLO}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users - Edit User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should status code is not 500\", function () {\r",
									"    pm.response.to.not.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Should response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Should response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Should response have correct properties\", function () {\r",
									"    var jsonData = pm.response.json();    \r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData).to.have.property('username');\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData.address.street).to.be.an('string');\r",
									"    pm.expect(jsonData.company.name).to.be.an('string');    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 11,\r\n        \"name\": \"test1\",\r\n        \"username\": \"test1\",\r\n        \"email\": \"test1@april.biz\",\r\n        \"address\": {\r\n            \"street\": \"test1\",\r\n            \"suite\": \"test1\",\r\n            \"city\": \"test1\",\r\n            \"zipcode\": \"92998-3874\",\r\n            \"geo\": {\r\n                \"lat\": \"-37.3159\",\r\n                \"lng\": \"81.1496\"\r\n            }\r\n        },\r\n        \"phone\": \"1-770-736-8031 x56442\",\r\n        \"website\": \"hildegard.org\",\r\n        \"company\": {\r\n            \"name\": \"Romaguera-Crona\",\r\n            \"catchPhrase\": \"Multi-layered client-server neural-net\",\r\n            \"bs\": \"harness real-time e-markets\"\r\n        }\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PROTOCOLO}}://{{URL}}/users/10",
							"protocol": "{{PROTOCOLO}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"users",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users - Delete Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should status code is not 500\", function () {\r",
									"    pm.response.to.not.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Should response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Should response is json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{PROTOCOLO}}://{{URL}}/users/1",
							"protocol": "{{PROTOCOLO}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"users",
								"1"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Users - Server Failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Should status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Should status code is not 200\", function () {\r",
									"    pm.response.to.not.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 1517,\r\n        \"name\": \"Lucas Percello\",\r\n        \"username\": \"lucjs\",\r\n        \"email\": \"lucaspercello@gmail.com\",\r\n        \"address\": {\r\n            \"street\": \"Calle 1\",\r\n            \"suite\": \"526\",\r\n            \"city\": \"Cordoba\",\r\n            \"zipcode\": \"5010\",\r\n            \"geo\": {\r\n                \"lat\": \"-37.3159\",\r\n                \"lng\": \"81.1496\"\r\n            }\r\n        },\r\n        \"phone\": \"+ 54 9 3512275100\",\r\n        \"website\": \"lucjs.org\",\r\n        \"company\": {\r\n            \"name\": \"CleverIT\",\r\n            \"catchPhrase\": \"Postman Test\",\r\n            \"bs\": \"Automation QA\"\r\n        }\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PROTOCOLO}}://{{URL}}/users/1517",
							"protocol": "{{PROTOCOLO}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"users",
								"1517"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}